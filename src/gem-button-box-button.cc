/* Generated by GOB (v2.0.12) on Sun May 20 23:26:22 2007
   (do not edit directly) */

/* End world hunger, donate to the World Food Programme, http://www.wfp.org */

#define GOB_VERSION_MAJOR 2
#define GOB_VERSION_MINOR 0
#define GOB_VERSION_PATCHLEVEL 12

#define selfp (self->_priv)

#include <string.h> /* memset() */

#include "gem-button-box-button.h"

#include "gem-button-box-button-private.h"

#ifdef G_LIKELY
#define ___GOB_LIKELY(expr) G_LIKELY(expr)
#define ___GOB_UNLIKELY(expr) G_UNLIKELY(expr)
#else /* ! G_LIKELY */
#define ___GOB_LIKELY(expr) (expr)
#define ___GOB_UNLIKELY(expr) (expr)
#endif /* G_LIKELY */

#line 14 "src/gem-button-box-button.gob"

enum {
    RESPONSE_RUN,
    RESPONSE_NEW,
    RESPONSE_SAVE
};


// Forward declarations to break cyclic dependancies...
extern "C" {
struct GemButtonBox;
void 	gem_button_box_delete_button	(GemButtonBox* self,
                                         GtkWidget * bbb_to_delete);
 
}

void
cb_button_menu_activate_edit(GtkWidget *menuitem,
                             gpointer user_data);
void
cb_button_menu_activate_delete(GtkWidget *menuitem,
                               gpointer user_data);

#line 51 "gem-button-box-button.cc"
/* self casting macros */
#define SELF(x) GEM_BUTTON_BOX_BUTTON(x)
#define SELF_CONST(x) GEM_BUTTON_BOX_BUTTON_CONST(x)
#define IS_SELF(x) GEM_IS_BUTTON_BOX_BUTTON(x)
#define TYPE_SELF GEM_TYPE_BUTTON_BOX_BUTTON
#define SELF_CLASS(x) GEM_BUTTON_BOX_BUTTON_CLASS(x)

#define SELF_GET_CLASS(x) GEM_BUTTON_BOX_BUTTON_GET_CLASS(x)

/* self typedefs */
typedef GemButtonBoxButton Self;
typedef GemButtonBoxButtonClass SelfClass;

/* here are local prototypes */
static void gem_button_box_button_class_init (GemButtonBoxButtonClass * c) G_GNUC_UNUSED;
static void gem_button_box_button_init (GemButtonBoxButton * self) G_GNUC_UNUSED;
static void ___8_gem_button_box_button_clicked (GtkButton * widget) G_GNUC_UNUSED;
static gboolean ___9_gem_button_box_button_button_press_event (GtkWidget * self, GdkEventButton * event) G_GNUC_UNUSED;

/* pointer to the class of our parent */
static GtkButtonClass *parent_class = NULL;

/* Short form macros */
#define self_new gem_button_box_button_new
#define self_get_script gem_button_box_button_get_script
#define self_set_script gem_button_box_button_set_script
#define self_get_label gem_button_box_button_get_label
#define self_set_label gem_button_box_button_set_label
#define self_cmd_eval gem_button_box_button_cmd_eval
GType
gem_button_box_button_get_type (void)
{
	static GType type = 0;

	if ___GOB_UNLIKELY(type == 0) {
		static const GTypeInfo info = {
			sizeof (GemButtonBoxButtonClass),
			(GBaseInitFunc) NULL,
			(GBaseFinalizeFunc) NULL,
			(GClassInitFunc) gem_button_box_button_class_init,
			(GClassFinalizeFunc) NULL,
			NULL /* class_data */,
			sizeof (GemButtonBoxButton),
			0 /* n_preallocs */,
			(GInstanceInitFunc) gem_button_box_button_init,
			NULL
		};

		type = g_type_register_static (GTK_TYPE_BUTTON, "GemButtonBoxButton", &info, (GTypeFlags)0);
	}

	return type;
}

/* a macro for creating a new object of our type */
#define GET_NEW ((GemButtonBoxButton *)g_object_new(gem_button_box_button_get_type(), NULL))

/* a function for creating a new object of our type */
#include <stdarg.h>
static GemButtonBoxButton * GET_NEW_VARG (const char *first, ...) G_GNUC_UNUSED;
static GemButtonBoxButton *
GET_NEW_VARG (const char *first, ...)
{
	GemButtonBoxButton *ret;
	va_list ap;
	va_start (ap, first);
	ret = (GemButtonBoxButton *)g_object_new_valist (gem_button_box_button_get_type (), first, ap);
	va_end (ap);
	return ret;
}


static void
___finalize(GObject *obj_self)
{
#define __GOB_FUNCTION__ "Gem:Button:Box:Button::finalize"
	GemButtonBoxButton *self G_GNUC_UNUSED = GEM_BUTTON_BOX_BUTTON (obj_self);
	gpointer priv G_GNUC_UNUSED = self->_priv;
	if(G_OBJECT_CLASS(parent_class)->finalize) \
		(* G_OBJECT_CLASS(parent_class)->finalize)(obj_self);
}
#undef __GOB_FUNCTION__

static void 
gem_button_box_button_class_init (GemButtonBoxButtonClass * c)
{
#define __GOB_FUNCTION__ "Gem:Button:Box:Button::class_init"
	GObjectClass *g_object_class G_GNUC_UNUSED = (GObjectClass*) c;
	GtkButtonClass *gtk_button_class = (GtkButtonClass *)c;
	GtkWidgetClass *gtk_widget_class = (GtkWidgetClass *)c;

	g_type_class_add_private(c,sizeof(GemButtonBoxButtonPrivate));

	parent_class = (GtkButtonClass *)g_type_class_ref (GTK_TYPE_BUTTON);

#line 147 "src/gem-button-box-button.gob"
	gtk_button_class->clicked = ___8_gem_button_box_button_clicked;
#line 159 "src/gem-button-box-button.gob"
	gtk_widget_class->button_press_event = ___9_gem_button_box_button_button_press_event;
#line 151 "gem-button-box-button.cc"
	g_object_class->finalize = ___finalize;
}
#undef __GOB_FUNCTION__
#line 66 "src/gem-button-box-button.gob"
static void 
gem_button_box_button_init (GemButtonBoxButton * self)
#line 158 "gem-button-box-button.cc"
{
#define __GOB_FUNCTION__ "Gem:Button:Box:Button::init"
	self->_priv = G_TYPE_INSTANCE_GET_PRIVATE(self,GEM_TYPE_BUTTON_BOX_BUTTON,GemButtonBoxButtonPrivate);
 {
#line 67 "src/gem-button-box-button.gob"

        GtkWidget *menu_item;
        int row = 0;

        selfp->menu = gtk_menu_new();

        menu_item =gtk_menu_item_new_with_label("Edit");
        g_signal_connect(G_OBJECT(menu_item), "activate",
                         G_CALLBACK(cb_button_menu_activate_edit),
                         self);
        gtk_menu_attach(GTK_MENU(selfp->menu),
                        menu_item,
                        0,1,
                        row,row+1);
        row++;
        
        menu_item =gtk_menu_item_new_with_label("Delete");
        g_signal_connect(G_OBJECT(menu_item), "activate",
                         G_CALLBACK(cb_button_menu_activate_delete),
                         self);
        gtk_menu_attach(GTK_MENU(selfp->menu),
                        menu_item,
                        0,1,
                        row,row+1);
        row++;
        
        menu_item =gtk_menu_item_new_with_label("Move back");
        gtk_menu_attach(GTK_MENU(selfp->menu),
                        menu_item,
                        0,1,
                        row,row+1);
        row++;
        
        menu_item =gtk_menu_item_new_with_label("Move forward");
        gtk_menu_attach(GTK_MENU(selfp->menu),
                        menu_item,
                        0,1,
                        row,row+1);
        row++;
    
#line 204 "gem-button-box-button.cc"
 }
}
#undef __GOB_FUNCTION__


#line 46 "src/gem-button-box-button.gob"
GtkWidget * 
gem_button_box_button_new (const gchar * label, const gchar * script, GtkWidget * button_box, GemCmdEval * cmd_eval)
#line 213 "gem-button-box-button.cc"
{
#define __GOB_FUNCTION__ "Gem:Button:Box:Button::new"
#line 46 "src/gem-button-box-button.gob"
	g_return_val_if_fail (label != NULL, (GtkWidget * )NULL);
#line 218 "gem-button-box-button.cc"
{
#line 52 "src/gem-button-box-button.gob"
	
        GtkWidget *widget = (GtkWidget*)GET_NEW;
        GemButtonBoxButton *self = GEM_BUTTON_BOX_BUTTON(widget);
        GtkWidget *label_widget = gtk_label_new (label);
        selfp->script = g_strdup(script);
        selfp->label = g_strdup(label);
        selfp->w_button_box = button_box;
        selfp->cmd_eval = cmd_eval;

        gtk_container_add (GTK_CONTAINER (widget), label_widget);
        gtk_widget_show (label_widget);
        return widget;
    }}
#line 234 "gem-button-box-button.cc"
#undef __GOB_FUNCTION__


#line 108 "src/gem-button-box-button.gob"
const gchar * 
gem_button_box_button_get_script (GemButtonBoxButton * self)
#line 241 "gem-button-box-button.cc"
{
#define __GOB_FUNCTION__ "Gem:Button:Box:Button::get_script"
#line 108 "src/gem-button-box-button.gob"
	g_return_val_if_fail (self != NULL, (const gchar * )0);
#line 108 "src/gem-button-box-button.gob"
	g_return_val_if_fail (GEM_IS_BUTTON_BOX_BUTTON (self), (const gchar * )0);
#line 248 "gem-button-box-button.cc"
{
#line 110 "src/gem-button-box-button.gob"
	
        return selfp->script;
    }}
#line 254 "gem-button-box-button.cc"
#undef __GOB_FUNCTION__

#line 114 "src/gem-button-box-button.gob"
void 
gem_button_box_button_set_script (GemButtonBoxButton * self, const gchar * script)
#line 260 "gem-button-box-button.cc"
{
#define __GOB_FUNCTION__ "Gem:Button:Box:Button::set_script"
#line 114 "src/gem-button-box-button.gob"
	g_return_if_fail (self != NULL);
#line 114 "src/gem-button-box-button.gob"
	g_return_if_fail (GEM_IS_BUTTON_BOX_BUTTON (self));
#line 267 "gem-button-box-button.cc"
{
#line 116 "src/gem-button-box-button.gob"
	
        if (selfp->script)
            g_free(selfp->script);
        selfp->script = g_strdup(script);
    }}
#line 275 "gem-button-box-button.cc"
#undef __GOB_FUNCTION__

#line 122 "src/gem-button-box-button.gob"
const gchar * 
gem_button_box_button_get_label (GemButtonBoxButton * self)
#line 281 "gem-button-box-button.cc"
{
#define __GOB_FUNCTION__ "Gem:Button:Box:Button::get_label"
#line 122 "src/gem-button-box-button.gob"
	g_return_val_if_fail (self != NULL, (const gchar * )0);
#line 122 "src/gem-button-box-button.gob"
	g_return_val_if_fail (GEM_IS_BUTTON_BOX_BUTTON (self), (const gchar * )0);
#line 288 "gem-button-box-button.cc"
{
#line 124 "src/gem-button-box-button.gob"
	
        return selfp->label;
    }}
#line 294 "gem-button-box-button.cc"
#undef __GOB_FUNCTION__

#line 128 "src/gem-button-box-button.gob"
void 
gem_button_box_button_set_label (GemButtonBoxButton * self, const gchar * label)
#line 300 "gem-button-box-button.cc"
{
#define __GOB_FUNCTION__ "Gem:Button:Box:Button::set_label"
#line 128 "src/gem-button-box-button.gob"
	g_return_if_fail (self != NULL);
#line 128 "src/gem-button-box-button.gob"
	g_return_if_fail (GEM_IS_BUTTON_BOX_BUTTON (self));
#line 307 "gem-button-box-button.cc"
{
#line 130 "src/gem-button-box-button.gob"
	
        if (selfp->label)
            g_free(selfp->label);
        selfp->label = g_strdup(label);
        GtkWidget *w_label = gtk_bin_get_child(GTK_BIN(self));
        gtk_label_set_text(GTK_LABEL(w_label), label);
    }}
#line 317 "gem-button-box-button.cc"
#undef __GOB_FUNCTION__

#line 138 "src/gem-button-box-button.gob"
void 
gem_button_box_button_cmd_eval (GemButtonBoxButton * self, const char * cmd)
#line 323 "gem-button-box-button.cc"
{
#define __GOB_FUNCTION__ "Gem:Button:Box:Button::cmd_eval"
#line 138 "src/gem-button-box-button.gob"
	g_return_if_fail (self != NULL);
#line 138 "src/gem-button-box-button.gob"
	g_return_if_fail (GEM_IS_BUTTON_BOX_BUTTON (self));
#line 330 "gem-button-box-button.cc"
{
#line 140 "src/gem-button-box-button.gob"
	
        if (cmd == NULL)
            selfp->cmd_eval(selfp->script);
        else
            selfp->cmd_eval(cmd);
    }}
#line 339 "gem-button-box-button.cc"
#undef __GOB_FUNCTION__

#line 147 "src/gem-button-box-button.gob"
static void 
___8_gem_button_box_button_clicked (GtkButton * widget)
#line 345 "gem-button-box-button.cc"
#define PARENT_HANDLER(___widget) \
	{ if(GTK_BUTTON_CLASS(parent_class)->clicked) \
		(* GTK_BUTTON_CLASS(parent_class)->clicked)(___widget); }
{
#define __GOB_FUNCTION__ "Gem:Button:Box:Button::clicked"
#line 147 "src/gem-button-box-button.gob"
	g_return_if_fail (widget != NULL);
#line 147 "src/gem-button-box-button.gob"
	g_return_if_fail (GTK_IS_BUTTON (widget));
#line 355 "gem-button-box-button.cc"
{
#line 150 "src/gem-button-box-button.gob"
	
        GemButtonBoxButton *self = GEM_BUTTON_BOX_BUTTON (widget);

        selfp->cmd_eval(selfp->script);

        /* run the parent class handler for clicked */
        PARENT_HANDLER (widget);
    }}
#line 366 "gem-button-box-button.cc"
#undef __GOB_FUNCTION__
#undef PARENT_HANDLER

#line 159 "src/gem-button-box-button.gob"
static gboolean 
___9_gem_button_box_button_button_press_event (GtkWidget * self, GdkEventButton * event)
#line 373 "gem-button-box-button.cc"
#define PARENT_HANDLER(___self,___event) \
	((GTK_WIDGET_CLASS(parent_class)->button_press_event)? \
		(* GTK_WIDGET_CLASS(parent_class)->button_press_event)(___self,___event): \
		((gboolean )0))
{
#define __GOB_FUNCTION__ "Gem:Button:Box:Button::button_press_event"
#line 159 "src/gem-button-box-button.gob"
	g_return_val_if_fail (self != NULL, (gboolean )0);
#line 159 "src/gem-button-box-button.gob"
	g_return_val_if_fail (GTK_IS_WIDGET (self), (gboolean )0);
#line 384 "gem-button-box-button.cc"
{
#line 163 "src/gem-button-box-button.gob"
	
        GemButtonBoxButton *bbb = GEM_BUTTON_BOX_BUTTON (self);

        if (event->button == 3) {
            gtk_widget_grab_focus(self);
            gtk_widget_show_all(GTK_WIDGET(bbb->_priv->menu));
            gtk_menu_popup(GTK_MENU(bbb->_priv->menu), NULL, NULL, NULL, NULL,
                           event->button, event->time);
            return TRUE;
        }
        PARENT_HANDLER (self, event);
        return TRUE;
    }}
#line 400 "gem-button-box-button.cc"
#undef __GOB_FUNCTION__
#undef PARENT_HANDLER

#line 178 "src/gem-button-box-button.gob"

void
cb_button_menu_activate_edit(GtkWidget *menuitem,
                             gpointer user_data)
{
    GemButtonBoxButton *bbb = GEM_BUTTON_BOX_BUTTON(user_data);
    GtkWidget *dialog_edit
        = gem_button_box_button_editor_new(GTK_WIDGET(bbb));

    gtk_widget_show_all(dialog_edit);
}

void
cb_button_menu_activate_delete(GtkWidget *menuitem,
                               gpointer user_data)
{
    GemButtonBoxButton *self = GEM_BUTTON_BOX_BUTTON(user_data);

    gem_button_box_delete_button((GemButtonBox*)(selfp->w_button_box),
                                 (GtkWidget*)self);
}


#line 428 "gem-button-box-button.cc"

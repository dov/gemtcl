// An editor for a gem-buttonboxbutton
//
// References:
//    * http://www.gtk.org/tutorial/x2331.html
//
requires 2.0.0

%headertop{
#include <math.h>
#include <gtk/gtk.h>
#include <gtksourceview/gtksourceview.h>
#include <gtksourceview/gtksourcelanguage.h>
#ifdef GTKSOURCEVIEW1
#include <gtksourceview/gtksourcelanguagesmanager.h>
#else
#include <gtksourceview/gtksourcelanguagemanager.h>
#endif
#include "gem.h"
%}

%{
#include "gem-button-box-button-bless.h"

#define DO_HOMOGENOUS TRUE
#define DO_NOT_HOMOGENOUS FALSE
#define DO_EXPAND TRUE
#define DO_NOT_EXPAND FALSE
#define DO_FILL TRUE
#define DO_NOT_FILL FALSE

/* Define some macros defining all space distance used in programs */
#define SPACE_ZERO 0
#define PADDING_ZERO 0

enum {
    RESPONSE_RUN,
    RESPONSE_NEW,
    RESPONSE_SAVE
};

%}

class Gem:Button:Box:Button:Bless:Editor from Gtk:Dialog
{
    private GtkWidget *button_box_button;
    private GtkTextBuffer *text_buffer;
    private GtkWidget *w_entry_label;

    /*
     * bbb is the button ButtonBoxButton that is being "edited"
     */
    public GtkWidget *
    new (GtkWidget *bbb)
    {
        GemButtonBoxButtonBlessEditor *self = GEM_BUTTON_BOX_BUTTON_BLESS_EDITOR(GET_NEW);

        gtk_window_set_modal(GTK_WINDOW(self), FALSE);
        gtk_window_set_type_hint(GTK_WINDOW(self), GDK_WINDOW_TYPE_HINT_NORMAL);
        selfp->button_box_button = bbb;

        gtk_dialog_add_buttons(GTK_DIALOG(self),
                               GTK_STOCK_SAVE,
                               RESPONSE_SAVE,
                               GTK_STOCK_CLOSE,
                               GTK_RESPONSE_CLOSE,
                               "gtk-execute",
                               RESPONSE_RUN,
                               NULL
                               );

        GtkWidget *hbox = gtk_hbox_new(FALSE,FALSE);
        gtk_box_pack_start(GTK_BOX(hbox),
                           gtk_label_new("Label: "),
                           FALSE, FALSE, 0);
        selfp->w_entry_label = gtk_entry_new();
        gtk_entry_set_text(GTK_ENTRY(selfp->w_entry_label),
                           gem_button_box_button_bless_get_label(GTK_BUTTON(bbb)));
        
        if (!gem_button_box_button_bless_get_label_is_editible(GTK_BUTTON(bbb))) 
            gtk_entry_set_editable(GTK_ENTRY(selfp->w_entry_label), false);

        gtk_box_pack_start(GTK_BOX(hbox),
                           selfp->w_entry_label, FALSE, TRUE, 0);
        gtk_box_pack_start(GTK_BOX(GTK_DIALOG(self)->vbox),
                           hbox, FALSE, FALSE, 0);

        GtkWidget *w_text_sw = gtk_scrolled_window_new(FALSE, FALSE);
        /*        GtkWidget *w_text_view = gtk_text_view_new(); */

#ifdef GTKSOURCEVIEW1
        GtkSourceLanguagesManager *lang_manager = gtk_source_languages_manager_new();
        GtkSourceLanguage *tcl_language = gtk_source_languages_manager_get_language_from_mime_type (lang_manager, "text/x-tcl");
#else
        GtkSourceLanguageManager *lang_manager = gtk_source_language_manager_new();
        GtkSourceLanguage *tcl_language = gtk_source_language_manager_get_language (lang_manager, "tcl");
#endif
        selfp->text_buffer = GTK_TEXT_BUFFER(gtk_source_buffer_new_with_language(tcl_language));
        GtkWidget *w_text_view = gtk_source_view_new_with_buffer(GTK_SOURCE_BUFFER(selfp->text_buffer));
        gtk_source_view_set_auto_indent (GTK_SOURCE_VIEW(w_text_view),
                                         TRUE);
        
#ifdef GTKSOURCEVIEW1
        gtk_source_buffer_set_highlight(GTK_SOURCE_BUFFER(selfp->text_buffer),
                                        true);
#else
        gtk_source_buffer_set_highlight_syntax (GTK_SOURCE_BUFFER(selfp->text_buffer),
                                                true);
#endif        
        gtk_text_buffer_set_text(GTK_TEXT_BUFFER(selfp->text_buffer),
                                 gem_button_box_button_bless_get_script(GTK_BUTTON(bbb)), -1);

        gtk_text_view_set_wrap_mode (GTK_TEXT_VIEW(w_text_view),
                                     GTK_WRAP_NONE);
        gtk_source_view_set_insert_spaces_instead_of_tabs
            (GTK_SOURCE_VIEW(w_text_view),
             true);

        gtk_widget_modify_font(w_text_view,
                               pango_font_description_from_string("Monospace"));
        gtk_box_pack_start(GTK_BOX(GTK_DIALOG(self)->vbox),
                           w_text_sw,
                           TRUE, TRUE, 0);
        gtk_container_add(GTK_CONTAINER(w_text_sw), w_text_view);
        gtk_widget_set_size_request(w_text_view, 500, 300);
        
#if 0
        g_signal_connect(G_OBJECT(widget), "response",
                         G_CALLBACK(cb_dialog_edit_response),
                         bbb);
#endif

        gtk_widget_grab_focus(w_text_view);
        
        gtk_widget_show_all(GTK_WIDGET(self));

        return GTK_WIDGET(self);
    }

    override (Gtk:Dialog)
    void
    response (Gtk:Dialog *dialog (check null type),
              gint response_id)
    {
        GemButtonBoxButtonBlessEditor *self = GEM_BUTTON_BOX_BUTTON_BLESS_EDITOR(dialog);
        GtkTextIter iter_start, iter_end;
        
        gtk_text_buffer_get_start_iter(selfp->text_buffer, &iter_start);
        gtk_text_buffer_get_end_iter(selfp->text_buffer, &iter_end);
        gchar *contents=NULL,*selection=NULL;

        if (gtk_text_buffer_get_has_selection(selfp->text_buffer)) {
            GtkTextIter iter_sel_start, iter_sel_end;
            gtk_text_buffer_get_selection_bounds(selfp->text_buffer,
                                                 &iter_sel_start,
                                                 &iter_sel_end);
            selection= gtk_text_buffer_get_text(selfp->text_buffer,
                                                &iter_sel_start,
                                                &iter_sel_end, TRUE);

        }

        contents = gtk_text_buffer_get_text(selfp->text_buffer,
                                            &iter_start, &iter_end, TRUE);
        switch (response_id) {
        case GTK_RESPONSE_CLOSE:
            {
                const gchar *current_script = gem_button_box_button_bless_get_script(GTK_BUTTON(selfp->button_box_button));
                if (strcmp(current_script, contents) != 0) {
                    GtkWidget *qdialog
                        = gtk_message_dialog_new(GTK_WINDOW(dialog),
                                                 GTK_DIALOG_MODAL,
                                                 GTK_MESSAGE_QUESTION,
                                                 GTK_BUTTONS_YES_NO,
                                                 "Current script not stored. Save?"
                                                 );
                    gtk_widget_show_all(qdialog);
                    if (gtk_dialog_run(GTK_DIALOG(qdialog)) == GTK_RESPONSE_YES) {
                        gem_button_box_button_bless_set_script(GTK_BUTTON(selfp->button_box_button),
                                                         contents);
                        if (gem_button_box_button_bless_get_label_is_editible(GTK_BUTTON(selfp->button_box_button)))
                            gem_button_box_button_bless_set_label(GTK_BUTTON(selfp->button_box_button),
                                                                  gtk_entry_get_text(GTK_ENTRY(selfp->w_entry_label)));
                    }
                    
                    gtk_widget_destroy(GTK_WIDGET(qdialog));
                }
                gtk_widget_destroy(GTK_WIDGET(self));
            }
            break;
        case RESPONSE_RUN:
            {
                const char *run_cmd = selection;
                if (!run_cmd)
                    run_cmd = contents;

                gem_button_box_button_bless_cmd_eval(GTK_BUTTON(selfp->button_box_button),
                                                     run_cmd);
                break;
            }
        case RESPONSE_SAVE:
            if (gem_button_box_button_bless_get_label_is_editible(GTK_BUTTON(selfp->button_box_button))) 
                gem_button_box_button_bless_set_label(GTK_BUTTON(selfp->button_box_button),
                                                      gtk_entry_get_text(GTK_ENTRY(selfp->w_entry_label)));
            gem_button_box_button_bless_set_script(GTK_BUTTON(selfp->button_box_button),
                                                   contents);
            break;
        default:
            ;
        }
        g_free(contents);
        if (selection)
            g_free(selection);

        PARENT_HANDLER (GTK_DIALOG(self), response_id);
    }
}

